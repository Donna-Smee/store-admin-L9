name: Build, Test, and Deploy

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch

jobs:
  # Step 1: Build Job (Unit Test and Build Docker Image)
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: echo "Simulating Install Dependencies... Install Dependencies completed successfully!"

      - name: Unit Tests
        run: echo "Simulating unit tests... Test execution completed successfully!"

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
        run: |
          docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:test .

      - name: Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
        run: |
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:test

  # Step 2: Test Job (Integration Tests)
  Test:
    runs-on: ubuntu-latest

    needs: Build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Integration Tests
        run: echo "Simulating integration tests... Test execution completed successfully!"

  # Step 3: Release Job (Release Docker Image)
  Release:
    runs-on: ubuntu-latest

    needs: Test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Promote Docker Image to Latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
        run: |
          docker pull $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:test
          docker tag $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:test $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest

  # Step 4: Deploy Job
  Deploy:
    runs-on: ubuntu-latest

    needs: Release

    steps:
      - name: Deploy to AKS
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}  # base64 + gzip compressed kubeconfig
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
          DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}
          CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
        run: |
          # Decode base64 and decompress the kubeconfig
          echo "$KUBE_CONFIG_DATA" | base64 -d | gunzip > kubeconfig

          # Set the KUBECONFIG environment variable to the decompressed kubeconfig file
          export KUBECONFIG=kubeconfig

          # Deploy the Docker image to the Kubernetes deployment
          kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest
          kubectl rollout restart deployment/$DEPLOYMENT_NAME

      - name: Verify Deployment
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          DEPLOYMENT_NAME: ${{ vars.DEPLOYMENT_NAME }}
        run: |
          # Decode and decompress kubeconfig again
          echo "$KUBE_CONFIG_DATA" | base64 -d | gunzip > kubeconfig
          export KUBECONFIG=kubeconfig

          # Check the rollout status of the deployment
          kubectl rollout status deployment/$DEPLOYMENT_NAME

          # Get pods to verify the deployment
          kubectl get pods -o wide
